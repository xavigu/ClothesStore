{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Usuario\\\\Desktop\\\\Proyectos personal\\\\_Udemy Tutorials\\\\React Course\\\\Clothes-Store\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { auth, createUserProfileDocument, getCurrentUser, googleProvider } from '../../firebase/firebase.utils';\nimport { signInFailure, signInSuccess, signOutFailure, signOutSuccess } from './user.actions';\nimport UserActionTypes from './user.types';\nexport function* signInWithGoogle() {\n  // every API call needs go into try-catch block to catch the error\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth); // get user snapshot from firebase\n\n    const userSnapshot = yield userRef.get(); // put(), puts things back into our regular Redux flow\n    // update the currentUser state with the userReducer\n\n    yield put(signInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data())));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signUp() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n} //Functions that call another generator function if occurs an action\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  // the function signInWithEmail, get the payload from EMAIL_SIGN_IN_START action\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["C:/Users/Usuario/Desktop/Proyectos personal/_Udemy Tutorials/React Course/Clothes-Store/src/redux/user/user.sagas.js"],"names":["all","call","put","takeLatest","auth","createUserProfileDocument","getCurrentUser","googleProvider","signInFailure","signInSuccess","signOutFailure","signOutSuccess","UserActionTypes","signInWithGoogle","signInWithPopup","user","getSnapshotFromUserAuth","error","signInWithEmail","payload","email","password","signInWithEmailAndPassword","userAuth","userRef","userSnapshot","get","id","data","isUserAuthenticated","signUp","signOut","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onSignUpStart","SIGN_UP_START","onSignOutStart","SIGN_OUT_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport {\r\n  auth,\r\n  createUserProfileDocument,\r\n  getCurrentUser,\r\n  googleProvider,\r\n} from '../../firebase/firebase.utils';\r\n\r\nimport {\r\n  signInFailure,\r\n  signInSuccess,\r\n  signOutFailure,\r\n  signOutSuccess,\r\n} from './user.actions';\r\n\r\nimport UserActionTypes from './user.types';\r\n\r\nexport function* signInWithGoogle() {\r\n  // every API call needs go into try-catch block to catch the error\r\n  try {\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n    yield getSnapshotFromUserAuth(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n  try {\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n    yield getSnapshotFromUserAuth(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth) {\r\n  try {\r\n    const userRef = yield call(createUserProfileDocument, userAuth);\r\n    // get user snapshot from firebase\r\n    const userSnapshot = yield userRef.get();\r\n    // put(), puts things back into our regular Redux flow\r\n    // update the currentUser state with the userReducer\r\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n  try {\r\n    const userAuth = yield getCurrentUser();\r\n    if (!userAuth) return;\r\n    yield getSnapshotFromUserAuth(userAuth);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signUp() {\r\n  try {\r\n    yield auth.signOut();\r\n    yield put(signOutSuccess());\r\n  } catch (error) {\r\n    yield put(signOutFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signOut() {\r\n  try {\r\n    yield auth.signOut();\r\n    yield put(signOutSuccess());\r\n  } catch (error) {\r\n    yield put(signOutFailure(error));\r\n  }\r\n}\r\n\r\n//Functions that call another generator function if occurs an action\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n  // the function signInWithEmail, get the payload from EMAIL_SIGN_IN_START action\r\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\r\n}\r\n\r\nexport function* onSignUpStart() {\r\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(onGoogleSignInStart),\r\n    call(onEmailSignInStart),\r\n    call(onCheckUserSession),\r\n    call(onSignOutStart),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}