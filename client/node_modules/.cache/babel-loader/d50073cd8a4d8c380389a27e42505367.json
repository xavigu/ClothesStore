{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: 'AIzaSyA2nXiFIYyHPDRW_W9jtG7adzaLiZ-hPUg',\n  authDomain: 'clothes-store-a35af.firebaseapp.com',\n  databaseURL: 'https://clothes-store-a35af.firebaseio.com',\n  projectId: 'clothes-store-a35af',\n  storageBucket: 'clothes-store-a35af.appspot.com',\n  messagingSenderId: '68458598170',\n  appId: '1:68458598170:web:d1e467b033582889bea6a3',\n  measurementId: 'G-QB4SVP0WBX'\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get(); // check if there is any data of that userRef in the database(snapshot), if not create de new user in database\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n}; // Transform array of query objects into an object to use in the app with the right properties\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      id: doc.id,\n      routeName: encodeURI(title.toLowerCase()),\n      title,\n      items\n    };\n  }); // transform the array of objects into an object of objects with a key\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.routeName] = collection;\n    return accumulator;\n  }, {});\n}; // Function to add a collection in Firebase passin a string collectionKey, and the array of objects to add\n\nexport const addCollectionsAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log('collection Ref:', collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nfirebase.initializeApp(config);\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // get access to google auth in the auth library\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider(); // trigger the google pop-up whenever we use google authentication passing the provider\n// to the method signInWithPopup after setting parameters\n\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/Usuario/Desktop/Proyectos personal/_Udemy Tutorials/React Course/Clothes-Store/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","id","routeName","encodeURI","toLowerCase","reduce","accumulator","collection","addCollectionsAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","obj","newDocRef","commit","initializeApp","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\n\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n  apiKey: 'AIzaSyA2nXiFIYyHPDRW_W9jtG7adzaLiZ-hPUg',\r\n  authDomain: 'clothes-store-a35af.firebaseapp.com',\r\n  databaseURL: 'https://clothes-store-a35af.firebaseio.com',\r\n  projectId: 'clothes-store-a35af',\r\n  storageBucket: 'clothes-store-a35af.appspot.com',\r\n  messagingSenderId: '68458598170',\r\n  appId: '1:68458598170:web:d1e467b033582889bea6a3',\r\n  measurementId: 'G-QB4SVP0WBX',\r\n};\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n\r\n  const snapshot = await userRef.get();\r\n\r\n  // check if there is any data of that userRef in the database(snapshot), if not create de new user in database\r\n  if (!snapshot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData,\r\n      });\r\n    } catch (error) {\r\n      console.log('error creating user', error.message);\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n};\r\n\r\n// Transform array of query objects into an object to use in the app with the right properties\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n  const transformedCollection = collections.docs.map((doc) => {\r\n    const { title, items } = doc.data();\r\n    return {\r\n      id: doc.id,\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      title,\r\n      items,\r\n    };\r\n  });\r\n  // transform the array of objects into an object of objects with a key\r\n  return transformedCollection.reduce((accumulator, collection) => {\r\n    accumulator[collection.routeName] = collection;\r\n    return accumulator;\r\n  }, {});\r\n};\r\n\r\n// Function to add a collection in Firebase passin a string collectionKey, and the array of objects to add\r\nexport const addCollectionsAndDocuments = async (\r\n  collectionKey,\r\n  objectsToAdd\r\n) => {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n  console.log('collection Ref:', collectionRef);\r\n  const batch = firestore.batch();\r\n  objectsToAdd.forEach((obj) => {\r\n    const newDocRef = collectionRef.doc();\r\n    batch.set(newDocRef, obj);\r\n  });\r\n\r\n  return await batch.commit();\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const getCurrentUser = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\r\n      unsubscribe();\r\n      resolve(userAuth);\r\n    }, reject);\r\n  });\r\n};\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\n// get access to google auth in the auth library\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n// trigger the google pop-up whenever we use google authentication passing the provider\r\n// to the method signInWithPopup after setting parameters\r\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}