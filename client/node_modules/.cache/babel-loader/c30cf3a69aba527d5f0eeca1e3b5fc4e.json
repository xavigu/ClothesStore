{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Usuario\\\\Desktop\\\\Proyectos personal\\\\_Udemy Tutorials\\\\React Course\\\\Clothes-Store\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { auth, createUserProfileDocument, googleProvider } from '../../firebase/firebase.utils';\nimport { signInFailure, signInSuccess } from './user.actions';\nimport UserActionTypes from './user.types';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth); // get user snapshot from firebase\n\n    const userSnapshot = yield userRef.get(); //put(), puts things back into our regular Redux flow\n\n    yield put( // update the currentUser state with the userReducer\n    signInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data())));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  // every API call needs go into try-catch block to catch the error\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    console.log('user with google popup: ', user); // create user object to storage into the database\n\n    const userRef = yield call(createUserProfileDocument, user); // get user snapshot from firebase\n\n    const userSnapshot = yield userRef.get(); //put(), puts things back into our regular Redux flow\n\n    yield put( // update the currentUser state with the userReducer\n    signInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data())));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    console.log('user email: ', user); // create user object to storage into the database\n\n    const userRef = yield call(createUserProfileDocument, user); // get user snapshot from firebase\n\n    const userSnapshot = yield userRef.get(); //put(), puts things back into our regular Redux flow\n\n    yield put( // update the currentUser state with the userReducer\n    signInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data())));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  // the function signInWithEmail, get the payload from EMAIL_SIGN_IN_START action\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["C:/Users/Usuario/Desktop/Proyectos personal/_Udemy Tutorials/React Course/Clothes-Store/src/redux/user/user.sagas.js"],"names":["all","call","put","takeLatest","auth","createUserProfileDocument","googleProvider","signInFailure","signInSuccess","UserActionTypes","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","signInWithPopup","user","console","log","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport {\r\n  auth,\r\n  createUserProfileDocument,\r\n  googleProvider,\r\n} from '../../firebase/firebase.utils';\r\n\r\nimport { signInFailure, signInSuccess } from './user.actions';\r\n\r\nimport UserActionTypes from './user.types';\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth) {\r\n  try {\r\n    const userRef = yield call(createUserProfileDocument, userAuth);\r\n    // get user snapshot from firebase\r\n    const userSnapshot = yield userRef.get();\r\n    //put(), puts things back into our regular Redux flow\r\n    yield put(\r\n      // update the currentUser state with the userReducer\r\n      signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })\r\n    );\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n  // every API call needs go into try-catch block to catch the error\r\n  try {\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n    console.log('user with google popup: ', user);\r\n    // create user object to storage into the database\r\n    const userRef = yield call(createUserProfileDocument, user);\r\n    // get user snapshot from firebase\r\n    const userSnapshot = yield userRef.get();\r\n    //put(), puts things back into our regular Redux flow\r\n    yield put(\r\n      // update the currentUser state with the userReducer\r\n      signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })\r\n    );\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n  try {\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n    console.log('user email: ', user);\r\n    // create user object to storage into the database\r\n    const userRef = yield call(createUserProfileDocument, user);\r\n    // get user snapshot from firebase\r\n    const userSnapshot = yield userRef.get();\r\n    //put(), puts things back into our regular Redux flow\r\n    yield put(\r\n      // update the currentUser state with the userReducer\r\n      signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })\r\n    );\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n  // the function signInWithEmail, get the payload from EMAIL_SIGN_IN_START action\r\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}