{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Usuario\\\\Desktop\\\\Proyectos personal\\\\_Udemy Tutorials\\\\React Course\\\\Clothes-Store\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\Usuario\\\\Desktop\\\\Proyectos personal\\\\_Udemy Tutorials\\\\React Course\\\\Clothes-Store\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Desktop\\\\Proyectos personal\\\\_Udemy Tutorials\\\\React Course\\\\Clothes-Store\\\\src\\\\components\\\\sign-in\\\\sign-in.component.jsx\";\nimport React, { useState } from 'react';\nimport CustomButton from '../custom-button/custom-button.component';\nimport FormInput from '../form-input/form-input.component';\nimport './sign-in.styles.scss';\nimport { emailSignInStart, googleSignInStart } from '../../redux/user/user.actions';\nimport { connect } from 'react-redux';\n\nconst SignIn = ({\n  emailSignInStart,\n  googleSignInStart\n}) => {\n  const _useState = useState({\n    email: '',\n    password: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        userCrendentials = _useState2[0],\n        setCredentials = _useState2[1];\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const email = userCrendentials.email,\n          password = userCrendentials.password;\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = e => {\n    const _e$target = e.target,\n          value = _e$target.value,\n          name = _e$target.name;\n    setCredentials(_objectSpread({}, userCrendentials, {\n      [name]: value\n    }));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"sign-in\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"I already have an account\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Sign in with your email and password\"), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    label: \"email\",\n    value: this.state.email,\n    handleChange: handleChange,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    label: \"password\",\n    value: this.state.password,\n    handleChange: handleChange,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"buttons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(CustomButton, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Sign in\"), React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: googleSignInStart,\n    isGoogleSignIn: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Sign in with Google\"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["C:/Users/Usuario/Desktop/Proyectos personal/_Udemy Tutorials/React Course/Clothes-Store/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","CustomButton","FormInput","emailSignInStart","googleSignInStart","connect","SignIn","email","password","userCrendentials","setCredentials","handleSubmit","e","preventDefault","handleChange","target","value","name","state","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAiC,OAAjC;AAEA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AAEA,OAAQ,uBAAR;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,+BAApD;AACA,SAASC,OAAT,QAAwB,aAAxB;;AACA,MAAMC,MAAM,GAAG,CAAC;AAACH,EAAAA,gBAAD;AAAmBC,EAAAA;AAAnB,CAAD,KAA2C;AAAA,oBACbJ,QAAQ,CAAC;AAAEO,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,QAAQ,EAAE;AAAvB,GAAD,CADK;AAAA;AAAA,QACjDC,gBADiD;AAAA,QAC/BC,cAD+B;;AAGxD,QAAMC,YAAY,GAAG,MAAMC,CAAN,IAAW;AAC5BA,IAAAA,CAAC,CAACC,cAAF;AAD4B,UAEpBN,KAFoB,GAEAE,gBAFA,CAEpBF,KAFoB;AAAA,UAEbC,QAFa,GAEAC,gBAFA,CAEbD,QAFa;AAI5BL,IAAAA,gBAAgB,CAACI,KAAD,EAAQC,QAAR,CAAhB;AACD,GALH;;AAOA,QAAMM,YAAY,GAAGF,CAAC,IAAI;AAAA,sBACFA,CAAC,CAACG,MADA;AAAA,UACjBC,KADiB,aACjBA,KADiB;AAAA,UACVC,IADU,aACVA,IADU;AAGxBP,IAAAA,cAAc,mBAAKD,gBAAL;AAAuB,OAACQ,IAAD,GAAQD;AAA/B,OAAd;AACD,GAJD;;AAMA,SACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAFF,EAIE;AAAM,IAAA,QAAQ,EAAEL,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAC,OAHR;AAIE,IAAA,KAAK,EAAE,KAAKO,KAAL,CAAWX,KAJpB;AAKE,IAAA,YAAY,EAAGO,YALjB;AAME,IAAA,QAAQ,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE,oBAAC,SAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,KAAK,EAAC,UAHR;AAIE,IAAA,KAAK,EAAE,KAAKI,KAAL,CAAWV,QAJpB;AAKE,IAAA,YAAY,EAAGM,YALjB;AAME,IAAA,QAAQ,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EAeE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAIE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,QAAnB;AAA4B,IAAA,OAAO,EAAEV,iBAArC;AAAwD,IAAA,cAAc,MAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAJF,CAfF,CAJF,CADF;AA+BD,CA/CD;;AAiDA,MAAMe,kBAAkB,GAAGC,QAAQ,KAAK;AACtChB,EAAAA,iBAAiB,EAAE,MAAMgB,QAAQ,CAAChB,iBAAiB,EAAlB,CADK;AAEtCD,EAAAA,gBAAgB,EAAE,CAACI,KAAD,EAAQC,QAAR,KAAqBY,QAAQ,CAACjB,gBAAgB,CAAC;AAACI,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,CAAjB;AAFT,CAAL,CAAnC;;AAKA,eAAeH,OAAO,CAAC,IAAD,EAAOc,kBAAP,CAAP,CAAkCb,MAAlC,CAAf","sourcesContent":["import React, { useState }  from 'react'\r\n\r\nimport CustomButton from '../custom-button/custom-button.component';\r\nimport FormInput from '../form-input/form-input.component';\r\n\r\nimport  './sign-in.styles.scss';\r\nimport { emailSignInStart, googleSignInStart } from '../../redux/user/user.actions';\r\nimport { connect } from 'react-redux';\r\nconst SignIn = ({emailSignInStart, googleSignInStart}) => {\r\n  const [userCrendentials, setCredentials] = useState({ email: '', password: ''});\r\n\r\n  const handleSubmit = async e => {\r\n      e.preventDefault();\r\n      const { email, password } = userCrendentials;\r\n\r\n      emailSignInStart(email, password);\r\n    }\r\n\r\n  const handleChange = e => {\r\n    const {value, name} = e.target;\r\n\r\n    setCredentials({...userCrendentials, [name]: value })\r\n  }\r\n\r\n  return (\r\n    <div className='sign-in'>\r\n      <h2>I already have an account</h2>\r\n      <span>Sign in with your email and password</span>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <FormInput \r\n          name=\"email\" \r\n          type=\"email\"\r\n          label=\"email\" \r\n          value={this.state.email} \r\n          handleChange= {handleChange}\r\n          required/>\r\n        <FormInput \r\n          name=\"password\" \r\n          type=\"password\" \r\n          label=\"password\" \r\n          value={this.state.password}\r\n          handleChange= {handleChange} \r\n          required/>\r\n        <div className='buttons'>\r\n          <CustomButton type=\"submit\">\r\n            Sign in\r\n          </CustomButton>\r\n          <CustomButton type=\"button\" onClick={googleSignInStart} isGoogleSignIn>\r\n            Sign in with Google\r\n          </CustomButton>\r\n        </div>  \r\n      </form>\r\n    </div>\r\n  )\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  googleSignInStart: () => dispatch(googleSignInStart()),\r\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({email, password})),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(SignIn)\r\n"]},"metadata":{},"sourceType":"module"}